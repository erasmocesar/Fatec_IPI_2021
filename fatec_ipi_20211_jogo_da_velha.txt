BABEL--------------------------------------------------------------------
class Jogo extends React.Component {
  render() {
    return (
      <div className="game">
        {" "}
        <div className="game-board">
          {" "}
          <Tabuleiro
            quadrados={Array(9)
              .fill()
              .map((value, pos) => pos)}
          />{" "}
        </div>{" "}
      </div>
    );
  }
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];
  for (let i = 0; i < lines.length; i++) {
    //atribuição via desestruturação
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

class Tabuleiro extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      quadrados: Array(9).fill(null),
      xIsNext: true
    };
  }

  handleClick(i) {
    //faz uma cópia do vetor
    const quadrados = this.state.quadrados.slice();
    if (calculateWinner(quadrados)) {
      alert("Jogo já acabou");
      return;
    }
    if (quadrados[i]) {
      alert("Quadrado ocupado!");
      return;
    }

    quadrados[i] = this.state.xIsNext ? "X" : "0";
    this.setState({
      quadrados: quadrados,
      xIsNext: !this.state.xIsNext
    });
  }

  handleRandom(state, setState) {
    const quadrados = this.state.quadrados.slice();
    if (calculateWinner(quadrados)) {
      alert("Jogo já acabou");
      return;
    }
    const vazios = [];
    quadrados.forEach((el, index) => {
      if (!el) {
        vazios.push(index);
      }
    });
    let choiceIndex = null;
    while (choiceIndex === null) {
      let index = Math.round(Math.random() * 9);
      let r = vazios.find((el) => el === index);
      if (r !== undefined) {
        choiceIndex = r;
      }
    }
    quadrados[choiceIndex] = state.xIsNext ? "X" : "0";
    setState({
      quadrados: quadrados,
      xIsNext: !this.state.xIsNext
    });
  }

  renderizarQuadrado(i) {
    return (
      <Quadrado
        value={this.state.quadrados[i]}
        onClick={() => this.handleClick(i)}
      />
    );
  }

  renderResetButton() {
    return (
      <button
        onClick={() =>
          this.setState({
            quadrados: Array(9).fill(null),
            xIsNext: true
          })
        }
      >
        Reset
      </button>
    );
  }

  renderRandomButton() {
    return (
      <button
        onClick={() =>
          this.handleRandom(this.state, (data) => this.setState(data))
        }
      >
        Aleatorio
      </button>
    );
  }

  render() {
    const vencedor = calculateWinner(this.state.quadrados);
    let status;
    if (vencedor) {
      status = "Vencedor: " + vencedor;
    } else {
      status = "Jogador: " + (this.state.xIsNext ? "X" : "O");
    }
    return (
      <div>
        {" "}
        <div className="status">{status}</div>{" "}
        <div className="board-row">
          {" "}
          {this.renderizarQuadrado(0)} {this.renderizarQuadrado(1)}{" "}
          {this.renderizarQuadrado(2)}{" "}
        </div>{" "}
        <div className="board-row">
          {" "}
          {this.renderizarQuadrado(3)} {this.renderizarQuadrado(4)}{" "}
          {this.renderizarQuadrado(5)}{" "}
        </div>{" "}
        <div className="board-row">
          {" "}
          {this.renderizarQuadrado(6)} {this.renderizarQuadrado(7)}{" "}
          {this.renderizarQuadrado(8)}{" "}
        </div>{" "}
        <br />
        {this.renderResetButton()}
        {this.renderRandomButton()}
      </div>
    );
  }
}

class Quadrado extends React.Component {
  render() {
    return (
      <button
        className="quadrado"
        onClick={() => {
          this.props.onClick();
        }}
      >
        {" "}
        {this.props.value}{" "}
      </button>
    );
  }
}

ReactDOM.render(
  <Tabuleiro
    quadrados={Array(9)
      .fill()
      .map((value, pos) => pos)}
  />,
  document.getElementById("root")
);

----------------------------------CSS------------------------------------------------------------------------------
.quadrado {
  background: #fff;
  border: 1px solid #999;
  font-size: 24px;
  float: left;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}

.board-row:after {
  clear: both;
  content: "";
  display: block;
}
----------------------------HTML-----------------------------------------------------------------------------
<div id="root"></div>
